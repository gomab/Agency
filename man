1. Start server
    $ php bin/console server:run


2. Create database
    $ php bin/console doctrine:database:create

3. Create Entity
    $ php bin/console make:entity

4. Create a migration
    $ php bin/console make:migration

5.Run the migration
    $ php bin/console doctrine:migrations:migrate

6. Add some new fields to old Entity
       $ php bin/console make:entity Property

------

6. Generate Form
    $ php bin/console make:form


    css: form_themes: ['bootstrap_4_layout.html.twig'] => config/packages/twig.yaml

    language : config/packages/translation.yaml, translations/forms.fr.yaml



--------------------------------

Slugify

URl: https://github.com/cocur/slugify

$ composer require cocur/slugify

add "use Cocur\Slugify\Slugify;" in Entity

________Secutity_____________________________
config/packages/security.yaml

1. create User entity
    $ php bin/console make:entity User
        -> username
        -> password

2. Generate migration
    $  php bin/console make:migration

3. Migration
    $ php bin/console doctrine:migrations:migrate

4. Add  implements UserInterface _--> class User     (use Symfony\Component\Security\Core\User\UserInterface;)
5. Add methods

6. For session
    class User implements UserInterface,\Serializable
7. Add methods


8. Create securityController

9. set up security/login.html.twig

10. Create logout route --> (config/routes.yaml)

11. user fixture


__________________DEBUGER LA CONFIG DES COMPOSANTS___________________
    $ php bin/console config:dump-reference security


 _____________________FIXTURES ------------------------- (composer require orm-fixtures --dev )

 1. create fixtures
    $ php bin/console make:fixtures

    * name : UserFixtures

2. setup Fixture   (src/DataFixtures/UserFixtures.php)

3. Load fixture
    $ php bin/console doctrine:fixtures:load --append



-----------------------
7.Pagination
    - $ composer require knplabs/knp-paginator-bundle

    - config/packages/knpPaginator.yaml

    - src/Repository/PropertyRepository.php

      /**
         * Tous les biens non vendu (Avec pagination)
         * @return Query
         */
        public  function findAllVisibleQuery():Query
        {
            return $this->findVisibleQuery('p')
                ->getQuery();
        }


    - PropertyController.php
        /**
         * @Route("/biens", name="property.index")
         */
        public function index(PaginatorInterface $paginator, Request $request)
        {
            $properties = $paginator->paginate(
                $this->repository->findAllVisibleQuery(),
                $request->query->getInt('page', 1),
                12
            );

            return $this->render('property/index.html.twig', [
                'current_menu' => 'properties',
                'properties'   => $properties
            ]);
        }


    -  index.html.twig
            {# display navigation #}
              <div class="navigation">
                  {{ knp_pagination_render(properties) }}
              </div>

    - translations/knpPaginatorBundle.fr.yaml


------------------------------
8. Recherche
    - Créer une entité qui va représenter notre recherche
        src/Entity/PropertySearch.php

    - Créer un formulaire
        * $ php bin/console make:form
        * PropertySearchType  (name of class)
        *  \App\Entity\PropertySearch (name of entity)

        * src/Form/PropertySearchType.php


    - Gérer le traitement dans le formulaire
       public function index(PaginatorInterface $paginator, Request $request) --> src/Controller/PropertyController.php

    - Repository (src/Repository/PropertyRepository.php)
         public  function findAllVisibleQuery(PropertySearch $search):Query
            {
                $query = $this->findVisibleQuery();

                if ($search->getMaxPrice()){
                    $query = $query
                            ->andWhere('p.price <= :maxprice')
                            ->setParameter('maxprice', $search->getMaxPrice());
                }

                if ($search->getMinSurface()){
                    $query = $query
                        ->andWhere('p.surface >= :minsurface')
                        ->setParameter('minsurface', $search->getMinSurface());
                }

                return  $query->getQuery();
            }



    - Affichage (templates/property/index.html.twig)

         <div class="jumbotron">
            <div class="container">
                {{ form_start(form) }}
                <div class="form-row align-items-end">
                    <div class="col">
                        {{ form_row(form.minSurface) }}
                    </div>
                    <div class="col">
                        {{ form_row(form.maxPrice) }}
                    </div>
                    <div class="col">
                       <div class="form-group">
                           <button class="btn btn-primary">Rechercher</button>
                       </div>
                    </div>

                </div>
            </div>
        </div>


----------------------------------------------------
9. Gestion des options
    - Creer entité pour les options
        $ php bin/console make:entity
        Option
        * name | properties/relation/Property/ManyToMany/yes

    - Migration to bdd

    - make crud
        * $  php bin/console make:crud Option

    - setup --> <<src/Controller/Admin/AdminOptionController.php

    - Setup views
        templates/admin/option

    - Add option --> src/Form/PropertyType.php
        //Add option
        ->add('options', EntityType::class, [
            'class' => Option::class,
            'choice_label' => 'name',
            'multiple' => true
        ])
        //End add option

    - set up Option and Property entity (mapped...)
    - Rollback migration
    - New Migration
    - Add select2.js (templates/base.html.twig, templates/admin/property/new.html.twig, templates/admin/property/edit.html.twig)


    - add champ option dans le formulaire PropertySearchType
        //Champ add options
                    ->add('options', EntityType::class, [
                        'required' => false,
                        'label' => false,
                        'class' => Option::class,
                        'choice_label'  => 'name',
                        'multiple'  => true
                    ])



    - Add variable $optuion --> src/Entity/PropertySearch.php, constructor et get et set
         /**
             * @var ArrayCollection
             */
            private $options;


               public function __construct()
                {
                    $this->options = new ArrayCollection();
                }



    -> add  --> src/Repository/PropertyRepository.php

      if ($search->getOptions()->count() > 0){
                $k = 0;

                foreach ($search->getOptions() as $option){
                    $k++;
                    $query = $query
                            ->andWhere(":option$k MEMBER OF p.options")
                            ->setParameter("option$k", $option);
                }
            }

-------------------------------
Rollback : retour arriere migration

1. Infos migration
    $ php bin/console doctrine:migrations:status
2. Migrer vers la derniere version (copier le timestemp de la derniere version "20200403162650")
    $ php bin/console doctrine:migrations:migrate 20200403162650

3. Supprimer la derniere migration (le dernier fichier) dans Migrations

4. Make migration
    $  bin/console make:migration
5. migrer vers la derniere version
    $ php bin/console doctrine:migrations:migrate

________________________________________________________________________________________________________________________
10- Image à la une

1. Install bundle uploader
    $ composer require vich/uploader-bundle

    https://github.com/dustin10/VichUploaderBundle/blob/master/docs/usage.md

2. set up --> config/packages/vich_uploader.yaml

3. Set up Property Entity

    - use Symfony\Component\HttpFoundation\File\File;
      use Vich\UploaderBundle\Mapping\Annotation as Vich;

    -/**
      * @ORM\Entity(repositoryClass="App\Repository\PropertyRepository")
      * @UniqueEntity("title")
      * @Vich\Uploadable   <-------------
      */

      - /**
             * @Vich\UploadableField(mapping="property_image", fileNameProperty="filename")
             *
             * @var File|null
             */
            private $imageFile;

            /**
             * @ORM\Column(type="string", length=255)
             *
             * @var string|null
             */
            private $filename;

     - Getter and setter


4. Add champ filename dans la bdd
    $ php bin/console make:migration

    $ php bin/console doctrine:migrations:migrate

5. Add imageFile champ dans le formulaire --> PropertyType
     ->add('imageFile', FileType::class, [
        'required' => false
     ])

 6. Add champ image --> templates/admin/property/_form.html.twig

7. Add champ updatedAt to property entity
    $ php bin/console make:entity Property
      --> updated_at

8. Migration

9. set up setImage --> src/Entity/Property.php

      public function setImageFile(?File $imageFile): Property
        {
            $this->imageFile = $imageFile;

            //Update Image
            if ($this->imageFile instanceof UploadedFile){
                $this->updated_at = new \DateTime('now');
            }

            return $this;
        }
10. Afficher l'image --> templates/property/_property.html.twig
     {% if property.filename %}
            <img src="{{ vich_uploader_asset(property, 'imageFile') }}" alt="card-img-top" style="width: 100%; height: auto">
     {% endif %}

11. Redimensionner l'image | https://packagist.org/packages/liip/imagine-bundle
    a. Install bundle
    $ composer require liip/imagine-bundle

    b. Setup --> config/packages/liip_imagine.yaml

12. Install php extension
    $ sudo apt-get install php7.3-gd

13. Supprimer les images sauvegarder en cache
    a. setup subscriber --> src/Listener/ImageCacheSubscriber.php
    b. setup service --> config/services.yaml
        App\Listener\ImageCacheSubscriber:
                tags:
                    - { name: doctrine.event_subscriber }

sudo service mysql start
sudo service apache2 start
