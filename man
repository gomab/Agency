1. Start server
    $ php bin/console server:run


2. Create database
    $ php bin/console doctrine:database:create

3. Create Entity
    $ php bin/console make:entity

4. Create a migration
    $ php bin/console make:migration

5.Run the migration
    $ php bin/console doctrine:migrations:migrate

6. Add some new fields to old Entity
       $ php bin/console make:entity Property

------

6. Generate Form
    $ php bin/console make:form


    css: form_themes: ['bootstrap_4_layout.html.twig'] => config/packages/twig.yaml

    language : config/packages/translation.yaml, translations/forms.fr.yaml



--------------------------------

Slugify

URl: https://github.com/cocur/slugify

$ composer require cocur/slugify

add "use Cocur\Slugify\Slugify;" in Entity

________Secutity_____________________________
config/packages/security.yaml

1. create User entity
    $ php bin/console make:entity User
        -> username
        -> password

2. Generate migration
    $  php bin/console make:migration

3. Migration
    $ php bin/console doctrine:migrations:migrate

4. Add  implements UserInterface _--> class User     (use Symfony\Component\Security\Core\User\UserInterface;)
5. Add methods

6. For session
    class User implements UserInterface,\Serializable
7. Add methods


8. Create securityController

9. set up security/login.html.twig

10. Create logout route --> (config/routes.yaml)

11. user fixture


__________________DEBUGER LA CONFIG DES COMPOSANTS___________________
    $ php bin/console config:dump-reference security


 _____________________FIXTURES ------------------------- (composer require orm-fixtures --dev )

 1. create fixtures
    $ php bin/console make:fixtures

    * name : UserFixtures

2. setup Fixture   (src/DataFixtures/UserFixtures.php)

3. Load fixture
    $ php bin/console doctrine:fixtures:load --append



-----------------------
7.Pagination
    - $ composer require knplabs/knp-paginator-bundle

    - config/packages/knpPaginator.yaml

    - src/Repository/PropertyRepository.php

      /**
         * Tous les biens non vendu (Avec pagination)
         * @return Query
         */
        public  function findAllVisibleQuery():Query
        {
            return $this->findVisibleQuery('p')
                ->getQuery();
        }


    - PropertyController.php
        /**
         * @Route("/biens", name="property.index")
         */
        public function index(PaginatorInterface $paginator, Request $request)
        {
            $properties = $paginator->paginate(
                $this->repository->findAllVisibleQuery(),
                $request->query->getInt('page', 1),
                12
            );

            return $this->render('property/index.html.twig', [
                'current_menu' => 'properties',
                'properties'   => $properties
            ]);
        }


    -  index.html.twig
            {# display navigation #}
              <div class="navigation">
                  {{ knp_pagination_render(properties) }}
              </div>

    - translations/knpPaginatorBundle.fr.yaml
